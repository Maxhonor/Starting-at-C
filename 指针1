//在32位的机器上，地址是32个0或1组成二进制序列，那地址就得用4个字节的空间去存储，所以一个指针变量的大小应该是4个字节
//64位机器上，其有64个地址线，一个指针变量的大小就是8个字节才能存放一个地址
//***指针类型决定了指针进行解引用操作的时候，能够访问空间的大小	
//int *p 其在进行解引用操作的时候，可访问4个字节的空间大小
//char *p ......其可访问1个字节的空间大小
//double *p.......其可访问8个字节的空间大小
/*#include<stdio.h>
//指针加减整数
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int *p = arr;
	//int *p=&arr[9];
	for (int i = 0; i < sz; i++)
	{
		printf("%d ", *p);
		p = p + 1;
		//p++;
		//p-=2;
	}
	return 0;
}*/
/*#include<stdio.h>
//用指针计算字符串长度
int my_strlen(char *str)
{
	char *start = str;
	char *end = str;
	while (*end != '\0')
	{
		end++;
	}
	return end - start;
}
int main()
{
	char arr[] = "bitch";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;
}*/
/*#include<stdio.h>
int main()
{
	//int arr[10] = { 0 };
	//int *p = arr;
	//for (int i = 0; i < 10; i++)
	//{
	//	*(p + i) = i;
	//}
	//for (int i = 0; i < 10; i++)
	//{
	//	printf("%d ", *(p+i));//用指针形式输出或者用数组元素a[i]
	//}
	int a = 10;
	int b = 20;
	int c = 30;
	int *arr[3] = { &a,&b,&c };
	for (int i = 0; i < 3; i++)
	{
		printf("%d ", *(arr[i]));//指针数组
	}
	return 0;
}*/
/*#define N_VALUES 5
float values[N_VALUES];//为其分配一个为5的数组空间
float *vp;
for (vp = &values[N_VALUES]; vp > &values[0];)//指针可以进行比较，其对应的下标可以用小的跟大的比，但是不能相反
{
	*--vp = 0;
}*/
/*#include<stdio.h>
//利用指针将数组arr中6个整数按相反顺序存放
void inv(int *x, int n)
{
	int *p, *q, t;
	for (p = x, q = x + n - 1; p < q; p++, q--)
	{
		t = *p;
		*p = *q;
		*q = t;

	}
}
int main()
{
	int arr[6];
	int *p = arr;
	for (int i = 0; i < 6; i++)
	{
		scanf("%d", p + i);//p+i相当于&arr[i];
	}
	inv(arr, 6);
	for (int i=0;i<6;i++)
	{
		printf("%6d ", *(p+i)); 
	}
	return 0;
}*/
//#include<stdio.h>
//将一个3x4的二维数组，利用指向元素的指针变量输出二维数组各元素的值
/*int main()
{
	int a[3][4] = { 1,3,5,7,9,11,13,15,17,19,21,23 };
	int *p;
	for (p = a[0]; p < a[0] + 12; p++)
	{
		if ((p - a[0]) % 4 == 0)
			printf("\n");
		printf("%4d", *p);
	}
	printf("\n");
	return 0;
}*/
//输出二维数组任一行任一列元素的值
//int main()
//{
//	int a[3][4] = { 1,3,5,7,9,11,13,15,17,19,21,23 };
//	int (*p)[4],i,j;//指针变量p指向包含4个整形元素的一维数组
//	p = a;//此时指向0行起始行
//	scanf("%d,%d", &i, &j);
//	printf("a[%d,%d]=%d\n", i, j, *(*(p + i) + j));
//	return 0;
//}
//在一个二维数组中利用指针找到其最大值并且输出其下标
/*int main()
{
	int a[3][4] = { 1,3,5,7,9,11,13,146,17,19,21,23 };
	int(*p)[4];
	int max, row, col;
	p = a;
	max = **p;//max=a[0][0];
	row = 0;
	col = 0;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (*(p[i] + j) > max)
			{
				max = *(*(p + i) + j);//等价于*(p[i]+j)
				row = i;
				col = j;
			}
			
		}
	}
	printf("%d,%d,%d", row, col, max);
	return 0;
}*/
/*#include<stdio.h>
//一个班3个学生各学4门课，计算其总平均分数以及第n个学生的成绩
void average(float *p, int n)//用指向变量的指针变量接收实参中传递来的地址
{
	float *p_end;
	float sum = 0, aver;
	p_end = p + n - 1;
	for (; p <= p_end; p++)
	{
		sum += *p;
	}
	aver = sum / n;
	printf("average=%5.2f\n", aver);

}
void search(float(*p)[4], int n)//用指向一维数组的指针变量来接收实参中传递来的地址
{
	printf("The score of No.%d are:\n", n);
	for (int i = 0; i < 4; i++)
	{
		printf("%5.2f ", *(*(p + n) + i));
	}
	printf("\n");
}
int main()
{
	float score[3][4] = { {65,67,70,60},{80,87,90,81},{90,99,100,98} };
	average(*score, 12);//函数调用
	search(score, 2);//求序号为2的学生的成绩
	return 0;
}*/
#include<stdio.h>
//查找有一门以上课程不及格的学生，输出他们全部的课程成绩
void search(float(*p)[4],int n)
{
	
	for (int i = 0; i < n; i++)
	{
		int flag = 0;
		for (int j = 0; j < 4; j++)
		{
			if (*(*(p + i) + j) < 60)
			{
				printf("No.%d fails,his scores are:\n", i);	
				flag = 1;
			}
		}
		if (flag == 1)
		{
			for (int j = 0; j < 4; j++)
			{
				printf("%5.1f ", *(*(p + i) + j));
				printf("\n");
			}
		}	
	}
}
int main()
{
	float score[3][4] = { {65,57,70,60},{58,87,90,81},{90,99,100,98} };//二维数组用来存储三个学生的课程成绩
	search(score, 3);

	return 0;
}
